#!/usr/bin/env python
PACKAGE = "uav_ros_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

x_controller = gen.add_group("X axis")
x_controller.add("x_armed", bool_t, 0, "Use the controler", True)
x_controller.add("k_p_x",    double_t,    0,   "Proportional gain for x axis", 0, 0, 500)
x_controller.add("k_i_x",    double_t,    0,   "Integrtor gain for x axis",    0, 0, 5)
x_controller.add("k_d_x",    double_t,    0,   "Derivative gain for x axis",   0.0, 0, 5)
x_controller.add("deadzone_x", double_t,    0,   "Deadzone for x axis",  0.0, 0, 1)
x_controller.add("saturation_x", double_t, 0, "Saturation", 0, 0, 100)

y_controller = gen.add_group("Y axis")
y_controller.add("y_armed", bool_t, 0, "Use the controler", True)
y_controller.add("k_p_y",    double_t,    0,   "Proportional gain for y axis", 0, 0, 500)
y_controller.add("k_i_y",    double_t,    0,   "Integrtor gain for y axis",    0, 0, 5)
y_controller.add("k_d_y",    double_t,    0,   "Derivative gain for y axis",   0.0, 0, 5)
y_controller.add("deadzone_y", double_t,    0,   "Deadzone for y axis",  0.0, 0, 1)
y_controller.add("saturation_y", double_t, 0, "Saturation", 0, 0, 1000)

z_controller = gen.add_group("Z axis")
z_controller.add("z_armed", bool_t, 0, "Use the controler", True)
z_controller.add("k_p_z",    double_t,    0,   "Proportional gain for z axis", 0, 0, 500)
z_controller.add("k_i_z",    double_t,    0,   "Integrtor gain for z axis",    0, 0, 50)
z_controller.add("k_d_z",    double_t,    0,   "Derivative gain for z axis",   0.0, 0, 50)
z_controller.add("deadzone_z", double_t,    0,   "Deadzone for z axis",  0.0, 0, 1)
z_controller.add("saturation_z", double_t, 0, "Saturation", 0, 0, 100)

yaw_controller = gen.add_group("Yaw control")
yaw_controller.add("yaw_armed", bool_t, 0, "Use the controler", True)
yaw_controller.add("k_p_yaw",    double_t,    0,   "Proportional gain for yaw", 0, 0, 1)
yaw_controller.add("k_i_yaw",    double_t,    0,   "Integrtor gain for yaw",    0, 0, 1)
yaw_controller.add("k_d_yaw",    double_t,    0,   "Derivative gain for yaw",   0.0, 0, 1)
yaw_controller.add("saturation_yaw", double_t, 0, "Saturation", 0, 0, 10)
yaw_controller.add("deadzone_yaw", double_t,    0,   "Deadzone for yaw",  0.0, 0, 1)
yaw_controller.add("landing_range_yaw", double_t,    0,   "It's ok to land when abs(yaw_error) is smaller than this",  0.05, 0, 1)

rate_limiters = gen.add_group("Rate Limiters")
rate_limiters.add("enable", bool_t, 0, "Enable rate limiters.", False)
rate_limiters.add("yaw_R", double_t, 0, "R for Rate Limiter", 1.0, -100.0, 100.0)
rate_limiters.add("yaw_T", double_t, 0, "Sample Time for Rate Limiter", 0.1, 0.0, 1.0)
rate_limiters.add("main_R", double_t, 0, "R for Rate Limiter", 1.0, -100.0, 100.0)
rate_limiters.add("main_T", double_t, 0, "Sample Time for Rate Limiter", 0.1, 0.0, 1.0)

general_params = gen.add_group("General parameters")
general_params.add("compensate_roll_and_pitch", bool_t, 0, "Take the angles into account when calculating the", False)
general_params.add("camera_fov", double_t, 0, "The camera's angle of view in degrees", 0, 0, 90);
general_params.add("yaw_added_offset", double_t, 0, "Added yaw offset to the feeedback from camera", 0, -1.57079, 1.57079)

exit(gen.generate(PACKAGE, "visual_servo", "VisualServoParameters"))


